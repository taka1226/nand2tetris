// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O.
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory
 * location specified by address. If load==1, the in value is loaded
 * into the memory location specified by address. This value becomes
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used.
 * Access to address>0x6000 is invalid. Access to any address in
 * the range 0x4000-0x5FFF results in accessing the screen memory
 * map. Access to address 0x6000 results in accessing the keyboard
 * memory map. The behavior in these addresses is described in the
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Put your code here:
    DMux(in=load, sel=address[14], a=a, b=b);  //16Kとそれ以外
    DMux(in=b, sel=address[13], a=b1, b=b2);   //8Kとそれ以外

    Or(a=address[0], b=address[1], out=temp1);
    Or(a=temp1, b=address[2], out=temp2);
    Or(a=temp2, b=address[3], out=temp3);
    Or(a=temp3, b=address[4], out=temp4);
    Or(a=temp4, b=address[5], out=temp5);
    Or(a=temp5, b=address[6], out=temp6);
    Or(a=temp6, b=address[7], out=temp7);
    Or(a=temp7, b=address[8], out=temp8);
    Or(a=temp8, b=address[9], out=temp9);
    Or(a=temp9, b=address[10], out=temp10);
    Or(a=temp10, b=address[11], out=temp11);
    Or(a=temp11, b=address[12], out=temp12);
    Not(in=temp12, out=isAllZero);

    DMux(in=b2, sel=isAllZero, a=c, b=d);

    RAM16K(in=in, load=a, address=address[0..13], out=r1);
    Screen(in=in, load=b1, address=address[0..12], out=r2);
    Keyboard(out=keyboardOut);
    Register(in=keyboardOut, load=true, out=r3);

    And(a=isAllZero, b=address[13], out=isKeyboard);

    //out
    Mux16(a=r2, b=r3, sel=isKeyboard, out=t1);
    Mux16(a=r1, b=t1, sel=address[14], out=out);
}

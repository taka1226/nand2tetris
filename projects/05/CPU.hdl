// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // decode the coming instructions
    Mux16(a[0..4]=false, a[5]=true, a[6..9]=false, a[10..11]=true, a[12..15]=false, b=instruction, sel=instruction[15], out[0..2]=j, out[3]=writeM, out[4]=DLoad, out[5]=ALoad, out[6]=no, out[7]=f, out[8]=ny, out[9]=zy, out[10]=nx, out[11]=zx, out[12]=AorMSel, out[15]=optBit);
    Mux16(a[0..4]=false, a[5]=true, a[6..9]=false, a[10..11]=true, a[12..15]=false, b=instruction, sel=instruction[15], out=i);
    //distinguish between A instruction and C instruction
    Mux16(a=instruction, b=ALUoutput, sel=optBit, out=AInput);

    //register
    ARegister(in=AInput, load=ALoad, out=AOutput, out[0..14]=addressM);  // A register

    DRegister(in=ALUoutput, load=DLoad, out=DOutput);  // D register

    // A or M Mux
    Mux16(a=AOutput, b=inM, sel=AorMSel, out=AOrM);

    //ALU
    ALU(x=DOutput, y=AOrM, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=ALUoutput, out=outM, zr=isEqual, ng=isNegative);  //zrは等号判定、ngは負判定



    // PCへのloadをinstruction[0..2], isEqual, isNegativeで作る
    JumpOrInc(instruction=j, isEqual=isEqual, isNegative=isNegative, out=pcLoad);


    //PC
    PC(in=AOutput, load=pcLoad, inc=true, reset=reset, out[0..14]=pc);   //loadはあとで作る




}

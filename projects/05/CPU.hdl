// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input
 * holds the value of this location. If the current instruction needs
 * to write a value to M, the value is placed in outM, the address
 * of the target location is placed in the addressM output, and the
 * writeM control bit is asserted. (When writeM==0, any value may
 * appear in outM). The outM and writeM outputs are combinational:
 * they are affected instantaneously by the execution of the current
 * instruction. The addressM and pc outputs are clocked: although they
 * are affected by the execution of the current instruction, they commit
 * to their new values only in the next time step. If reset==1 then the
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather
 * than to the address resulting from executing the current instruction.
 */

CHIP CPU {
    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M?
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // decode the coming instructions
    Mux16(a=true, b=instruction, sel=instruction[0], out=decodedInstruction);
    // Mux16(a=0000110000100000, b=instruction, sel=instruction[0], out=decodedInstruction);

    //distinguish between A instruction and C instruction
    Mux16(a=instruction, b=ALUoutput, sel=instruction[0], out=AInput);

    //register
    Register(in=AInput, load=instruction[10], out=AOutput, out=addressM);  // A register
    Register(in=ALUoutput, load=instruction[11], out=DOutput);  // D register

    // A or M Mux
    Mux16(a=AOutput, b=inM, sel=instruction[3], out=AOrM);

    //ALU
    ALU(x=DOutput, y=AOrM, zx=instruction[4], nx=instruction[5], zy=instruction[6], ny=instruction[7], f=instruction[8], no=instruction[9], out=ALUoutput, out=outM, zr=isEqual, ng=isNegative);  //zrは等号判定、ngは負判定

    // writeM
    DFF(in=instruction[12], out=writeM);


    // PCへのloadをinstruction[12..15], isEqual, isNegativeで作る
    JumpOrInc(instruction=instruction[12..15], isEqual=isEqual, isNegative=isNegative, out=pcLoad);

    //PC
    PC(in=AOutput, load=pcLoad, inc=true, reset=reset, out=pcTemp);   //loadはあとで作る
    DFF(in=pcTemp[1], out=pc[1]);
    DFF(in=pcTemp[2], out=pc[2]);
    DFF(in=pcTemp[3], out=pc[3]);
    DFF(in=pcTemp[4], out=pc[4]);
    DFF(in=pcTemp[5], out=pc[5]);
    DFF(in=pcTemp[6], out=pc[6]);
    DFF(in=pcTemp[7], out=pc[7]);
    DFF(in=pcTemp[8], out=pc[8]);
    DFF(in=pcTemp[9], out=pc[9]);
    DFF(in=pcTemp[10], out=pc[10]);
    DFF(in=pcTemp[11], out=pc[11]);
    DFF(in=pcTemp[12], out=pc[12]);
    DFF(in=pcTemp[13], out=pc[13]);
    DFF(in=pcTemp[14], out=pc[14]);
    DFF(in=pcTemp[15], out=pc[15]);


}
